{
  "name": "sails-redis",
  "version": "0.9.3",
  "description": "Redis adapter for waterline",
  "main": "index.js",
  "author": {
    "name": "vanetix",
    "email": "matmcfarland@gmail.com"
  },
  "contributors": [
    {
      "name": "Matt McFarland",
      "email": "matmcfarland@gmail.com"
    },
    {
      "name": "Cody Stoltman",
      "email": "particlebanana@gmail.com"
    },
    {
      "name": "Greg Thornton",
      "email": "xdissent@me.com"
    },
    {
      "name": "Carlo DiCelico",
      "email": "carlo@diceli.co"
    }
  ],
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/balderdashy/sails-redis.git"
  },
  "keywords": [
    "redis",
    "orm",
    "waterline",
    "sails",
    "sailsjs",
    "sails.js"
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.12.0",
    "waterline-adapter-tests": "~0.9.4"
  },
  "dependencies": {
    "lodash": "2.4.1",
    "redis": "0.8.4",
    "async": "0.2.9",
    "waterline-errors": "~0.9.0",
    "waterline-criteria": "~0.9.7"
  },
  "readme": "![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png)\n\n# Redis Sails/Waterline Adapter [![Build Status](https://travis-ci.org/vanetix/sails-redis.png)](https://travis-ci.org/vanetix/sails-redis)\n\nA Sails/Waterline adapter for Redis. May be used in a [Sails](https://github.com/balderdashy/sails) app or anything using Waterline for the ORM.\n\nThis `waterline-redis` stores indexes of unique attributes for *relatively* fast lookups. Collections with multiple unique constraints will create multiple index sets.\n\n\n## Install\n\nIn the near future, `sails-redis` will be available on npm.\n\nInstall is through NPM.\n\n```bash\n$ npm install sails-redis\n```\n\n## Configuration\n\nThe following connection configuration is available:\n\n```javascript\n// default values inline\nconfig: {\n  port: 6379,\n  host: 'localhost',\n  password: null,\n  options: {\n  \n    // low-level configuration\n    // (redis driver options)\n    parser: 'hiredis',\n    return_buffers: false,\n    detect_buffers: false,\n    socket_nodelay: true,\n    no_ready_check: false,\n    enable_offline_queue: true\n  }\n};\n```\n\n#### Low-Level Configuration (for redis driver)\n\nConfiguration for the underlying Redis driver itself is located as an object under the `options`.  The following options are available:\n\n* `parser`: which Redis protocol reply parser to use.  Defaults to `hiredis` if that module is installed.\nThis may also be set to `javascript`.\n* `return_buffers`: defaults to `false`.  If set to `true`, then all replies will be sent to callbacks as node Buffer\nobjects instead of JavaScript Strings.\n* `detect_buffers`: default to `false`. If set to `true`, then replies will be sent to callbacks as node Buffer objects\nif any of the input arguments to the original command were Buffer objects.\nThis option lets you switch between Buffers and Strings on a per-command basis, whereas `return_buffers` applies to\nevery command on a client.\n* `socket_nodelay`: defaults to `true`. Whether to call setNoDelay() on the TCP stream, which disables the\nNagle algorithm on the underlying socket.  Setting this option to `false` can result in additional throughput at the\ncost of more latency.  Most applications will want this set to `true`.\n* `no_ready_check`: defaults to `false`. When a connection is established to the Redis server, the server might still\nbe loading the database from disk.  While loading, the server not respond to any commands.  To work around this,\n`node_redis` has a \"ready check\" which sends the `INFO` command to the server.  The response from the `INFO` command\nindicates whether the server is ready for more commands.  When ready, `node_redis` emits a `ready` event.\nSetting `no_ready_check` to `true` will inhibit this check.\n* `enable_offline_queue`: defaults to `true`. By default, if there is no active\nconnection to the redis server, commands are added to a queue and are executed\nonce the connection has been established. Setting `enable_offline_queue` to\n`false` will disable this feature and the callback will be execute immediately\nwith an error, or an error will be thrown if no callback is specified.\n* `retry_max_delay`: defaults to `null`. By default every time the client tries to connect and fails time before\nreconnection (delay) almost doubles. This delay normally grows infinitely, but setting `retry_max_delay` limits delay\nto maximum value, provided in milliseconds.\n* `connect_timeout` defaults to `false`. By default client will try reconnecting until connected. Setting `connect_timeout`\nlimits total time for client to reconnect. Value is provided in milliseconds and is counted once the disconnect occured.\n* `max_attempts` defaults to `null`. By default client will try reconnecting until connected. Setting `max_attempts`\nlimits total amount of reconnects.\n* `auth_pass` defaults to `null`. By default client will try connecting without auth. If set, client will run redis auth command on connect.\n\n## FAQ\n\nSee `FAQ.md`.\n\n\n\n## Contribute\n\nSee `CONTRIBUTING.md`.\n\n\n## MIT License\n\nSee `LICENSE.md`.\n",
  "bugs": {
    "url": "https://github.com/balderdashy/sails-redis/issues"
  },
  "homepage": "https://github.com/balderdashy/sails-redis",
  "_id": "sails-redis@0.9.3",
  "_shasum": "ddd84e44ef1c0d407c664b4009c3ff9edd6846d4",
  "_from": "sails-redis@^0.9.3",
  "_resolved": "https://registry.npmjs.org/sails-redis/-/sails-redis-0.9.3.tgz"
}
