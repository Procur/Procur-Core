{
  "name": "testing",
  "version": "0.1.10",
  "description": "Simple asynchronous testing framework. Never again count your asserts! This tiny testing library is fully callback-based and has a rich API for asserts.",
  "homepage": "https://github.com/alexfernandez/testing",
  "contributors": [
    {
      "name": "Alex Fernández",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexfernandez/testing"
  },
  "dependencies": {
    "log": "*"
  },
  "keywords": [
    "testing",
    "test",
    "test framework",
    "TDD",
    "asynchronous"
  ],
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "node index.js"
  },
  "private": false,
  "readme": "[![Build Status](https://secure.travis-ci.org/alexfernandez/testing.png)](http://travis-ci.org/alexfernandez/testing)\n\nSimple async testing library for node.js.\nBetter suited to asynchronous tests than other libraries since it uses callbacks to get results.\n\nNow shows results in pretty colors!\n\n## Installation\n\nJust run:\n    $ npm install testing\n\nOr add package testing to your package.json dependencies.\n\n## Usage\n\nAdd asynchronous testing to your code very easily. Require testing:\n\n    var testing = require('testing');\n\n### Unit tests\n\nAdd a test function to your code, checking if results are what should be expected:\n\n    function testAdd(callback)\n    {\n\t\ttesting.assertEquals(add(1, 1), 2, 'Maths fail', callback);\n\t\ttesting.success(callback);\n    }\n\nRun an async test to read the contents of a file and check it is not empty:\n\n    function testAsync(callback)\n    {\n        function fs.readFile('file.txt', function(error, result)\n        {\n            if (error)\n            {\n                testing.failure('File not read', callback);\n            }\n            testing.assert(result, 'Empty file', callback);\n            testing.success(callback);\n        });\n    }\n\n### Running all tests\n\nRun all tests:\n\n    testing.run([\n        testAdd,\n        testAsync,\n    ], callback);\n\nWill run tests sequentially. Usually test are run inside an exported function `test`:\n\n    /**\n     * Run package tests.\n     */\n    exports.test = function(callback)\n    {   \n        var tests = [\n            testAdd,\n            testAsync,\n        ];\n        testing.run(tests, callback);\n    };  \n        \n    // run tests if invoked directly\n    if (__filename == process.argv[1])\n    {   \n        exports.test(testing.show);\n    }\n\nAll tests are run every time the file is invoked directly:\n\n    node my-file.js\n\nThe function `test` is exported so that tests from all source code files\ncan be required and run in sequence from a master file,\nusually called `test.js` and placed in the root of the project.\n\n## API\n\nImplementation is very easy, based around three functions.\n\n### Basics\n\nCallbacks are used for asynchronous testing. They follow the usual node.js convention:\n\n    callback(error, result);\n\nWhen no callback is passed, synchronous testing is performed.\n\n#### testing.success([message], [callback])\n\nNote success for the current test. An optional message is shown if there is no callback.\n\nIf there is a callback, then it is called with the message. Default message: true.\n\nExample:\n\n    testing.success(callback);\n\n#### testing.failure([message], [callback])\n\nNote failure for the current test.\n\nIf the callback is present, calls the callback with the error:\n\n    callback(message);\n\nOtherwise the message is shown using console.error(). Default message: 'Error'.\n\nExample:\n\n    testing.failure('An error happened', callback);\n\n#### testing.run(tests, [timeout], [callback])\n\nRun a set of tests. The first parameter is an object containing one attribute for every testing function.\n\nThe tests are considered as a failure when a certain configurable timeout has passed.\nThe timeout parameter is in milliseconds. The default is 2 seconds per test.\n\nWhen the optional callback is given, it is called after a failure or the success of all tests.\n\nExample:\n\n    testing.run({\n        first: testFirst,\n        second: testSecond,\n    }, 1000, callback);\n\nFor each attribute, the key is used to display success; the value is a testing function that accepts an optional callback.\n\nNote: testing uses async to run tests in series.\n\n### Asserts\n\nThere are several utility methods for assertions.\n\n#### testing.assert(condition, [message], [callback])\n\nChecks condition; if true, does nothing. Otherwise calls the callback passing the message, if present.\n\nWhen there is no callback, just prints the message to console.log() for success, console.error() for errors.\nDefault message: 'Assertion error'.\n\nExample:\n\n    testing.assert(shouldBeTrue(), 'shouldBeTrue() should return a truthy value', callback);\n\n#### testing.assertEquals(actual, expected, [message], [callback])\n\nCheck that the given values are equal. Uses weak equality (==).\n\nMessage and callback behave just like above.\n\nExample:\n\n    testing.assertEquals(getOnePlusOne(), 2, 'getOnePlusOne() does not work', callback);\n\n#### testing.assertNotEquals(actual, unexpected, [message], [callback])\n\nInverse of the above, check that the given values are *not* equal. Uses weak inequality (!=).\n\n#### testing.check(error, [message], [callback])\n\nCheck there are no errors.\nAlmost the exact opposite of an assertion: if there is an error, count as a failure.\nOtherwise, do nothing.\n\nExample:\n\n    testing.check(error, 'There should be no errors', callback);\n\nSimilar to over the following code:\n\n    testing.assert(!error, 'There should be no errors', callback);\n\nBut with the advantage that it shows the actual error message should there be one.\n\n### Showing results\n\nYou can use your own function to show results. The library provides a premade callback:\n\n#### testing.show(error, result)\n\nShow an error if present, a success if there was no error.\n\nExample:\n\n    testing.run(tests, testing.show);\n\nThis line can be run at the end of every code file to run its set of tests.\n\n#### testing.showComplete(error, result)\n\nLike `testing.show()`, but shows the complete hierarchical tree of tests.\nTest information is therefore duplicated: once shown while running,\nanother after all tests.\n\nExample:\n\n    exports.test(testing.showComplete);\n\n### Sample code\n\nThis library is tested using itself, check it out!\n  https://github.com/alexfernandez/testing/blob/master/index.js\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Alex Fernández <alexfernandeznpm@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexfernandez/testing/issues"
  },
  "_id": "testing@0.1.10",
  "_shasum": "c64b8b9078ba09615e600569661d20ad27518ba3",
  "_from": "testing@*",
  "_resolved": "https://registry.npmjs.org/testing/-/testing-0.1.10.tgz"
}
