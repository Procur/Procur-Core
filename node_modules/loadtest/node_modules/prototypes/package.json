{
  "name": "prototypes",
  "version": "0.2.2",
  "description": "Some common prototypes for node.js: string.startsWith(), object.countProperties() and more. Functions are added using Object.defineProperty() to avoid polluting new objects.",
  "homepage": "https://github.com/alexfernandez/prototypes",
  "contributors": [
    {
      "name": "Alex FernÃ¡ndez",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexfernandez/prototypes"
  },
  "dependencies": {
    "testing": "*"
  },
  "keywords": [
    "prototypes",
    "prototype",
    "string",
    "object"
  ],
  "engines": {
    "node": "*"
  },
  "preferGlobal": false,
  "scripts": {
    "test": "node test.js"
  },
  "private": false,
  "readme": "[![Build Status](https://secure.travis-ci.org/alexfernandez/prototypes.png)](http://travis-ci.org/alexfernandez/prototypes)\n\n# prototypes\n\nSome common prototypes for node.js: string.startsWith(),\nobject.countProperties() and more.\nFunctions are added using Object.defineProperty() to avoid polluting new objects.\n\n## Installation\n\nSimply install using npm:\n\n    npm install prototypes\n\nOr add to the dependencies of your project in your `package.json`.\n\n## Usage\n\nThis package adds some useful prototypes to String.\nTo use in your package, you just have to require prototypes:\n\n    require('prototypes');\n\nYou do not need to assign the result to any variable, and in fact JSHint\n(and similar code checkers) may complain about an unused variable if you\ndo this:\n\n    var prototypes = require('prototypes');\n\nThis last form is only required if you use any of the exported functions,\nwhich should be seldom the case.\n\n### License\n\nThis package is published under the MIT license.\nYou can integrate it in any commercial, closed software and/or make changes to the code with complete liberty.\nIf you send your changes back to the main repo we will be grateful,\nbut it is by no means required.\n\n## String Prototypes\n\nThe following string prototypes are provided.\n\n### string.startsWith(str)\n\nCheck that the current string starts with the given substring. Example:\n\n    'pepitus'.startsWith('pep');\n      \\=> true\n\n### string.endsWith(str)\n\nCheck that the current string ends with the given substring. Example:\n\n    'pepitus'.endsWith('tus');\n      \\=> true\n\n### string.substringUpTo(str)\n\nReturn the piece of string until the argument is found;\nreturn the whole string if not found.\nExample:\n\n    'hi.there'.substringUpTo('.');\n       \\=> 'hi'\n\n### string.substringUpToLast(str)\n\nReturn the piece of string until the last occurrence of the argument;\nreturn the whole string if not found.\nExample:\n\n    'hi.there.you'.substringUpToLast('.');\n       \\=> 'hi.there'\n\n### string.substringFrom(str)\n\nReturn the piece of string starting with the argument; empty string if not found.\nExample:\n\n    'hi.there'.substringFrom('.');\n       \\=> 'there'\n\n### string.substringFromLast(str)\n\nReturn the piece from the last occurrence of the argument; empty string if not found.\nExample:\n\n    'hi.there.you'.substringFromLast('.');\n       \\=> 'you'\n\n### string.contains(str)\n\nFind out if the string contains the argument at any position.\nExample:\n\n    'abcde'.contains('bcd');\n       \\=> true\n\n### string.containsIgnoreCase(str)\n\nFind out if the string contains the argument at any position,\nignoring case.\nExample:\n\n    'aBcDe'.contains('bCd');\n       \\=> true\n\n### string.replaceAll(str, replacement)\n\nReplace all occurrences of a string with the replacement.\nExample:\n\n    'pepitus'.replaceAll('p', 'c');\n       \\=> 'cecitus'\n\n### string.repeat(number)\n\nRepeat the given string a few times.\nExample:\n\n    'ab'.repeat(3);\n       \\=> 'ababab'\n\n### string.capitalize()\n\nCapitalize a string: first letter upper case, rest as is.\nExample:\n\n    'hello'.capitalize();\n       \\=> 'Hello'\n\n## Object Prototypes\n\nFor objects some care must be taken before overwriting `Object.prototype`:\notherwise it might break all code that does not check for hasOwnProperty().\nSee [MDN help](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty).\nIn this library all extensions are done using `Object.defineProperty()`\nwhich does not pollute objects as the new properties are not enumerable.\nAgain, see [MDN help](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n### object.countProperties(filter)\n\nCount the number of properties in an object.\nDoes not count inherited properties: uses Object.keys().\nExample:\n\n    {a: 'a'}.countProperties();\n      \\=> 1\n\nYou can also pass a string or a function as a filter:\n\n    {hello: 'a'}.countProperties('ll');\n      \\=> 1\n\n    {hello: 'a'}.countProperties(function(key) { return key.length == 5 });\n      \\=> 1\n\n### object.overwriteWith(overwriter)\n\nOverwrite properties in the original with the given object.\nExample:\n\n    {a: 'a'}.overwriteWith({b: 'b'});\n      \\=> {a: 'a', b: 'b'}\n\n## Array Prototypes\n\nThe following array prototypes are provided.\n\n### array.contains(element)\n\nCheck if the array contains the given element. Example:\n\n    ['a', 'b'].contains('a');\n      \\=> true\n\n## Math-related Functions\n\nThere are math functions in `Math`, in `Number.prototype`, exported `isNumber`\nand even as globals, e.g. `parseInt()`.\n\n### parseInt(string)\n\nBy default parseInt() requires a radix (or base), or it will recreate the radix itself:\nif the string starts with a leading zero,\nthen it interprets that you are parsing an octal number.\n\n    // unsafe parseInt()\n    parseInt('010');\n      \\=> 8\n\nThis library replaces the global function with a safe version that uses radix 10\nunless told otherwise.\nThe last person that wanted to convert octal with leading zeroes\nis probably programming in C anyway.\nExample:\n\n    parseInt('010');\n      \\=> 10\n\n### isNumber(value)\n\nThe function isNumber() is based on\n[this StackOverflow answer](http://stackoverflow.com/a/1830844/978796):\nit checks if the parameter is a number.\nExamples:\n\n    var prototypes = require('prototypes');\n    prototypes.isNumber(5);\n      \\=> true\n    prototypes.isNumber('hi');\n      \\=> false\n\n### Math.log10(number)\n\nLogarithm in base 10. Example:\n\n    Math.log10(10);\n      \\=> 1\n\n### number.toRad()\n\nConvert a number in degrees to radians. Example:\n\n    var n = 180;\n    n.toRad();\n      \\=> 3.141592653589793\n\n## RegExp Prototypes\n\nPrototypes used to enhance regular expressions (the RegExp prototype). Can also be used with the syntax\n/.../.\n\n### makeGlobal()\n\nReturns a new regular expression which is always global.\nExample:\n\n    'pepitus'.replace(/p/.makeGlobal(), 'c');\n      \\=> 'cecitus'\n\n## Acknowledgements\n\nThanks to my current employer [MediaSmart Mobile](http://www.mediasmart.es/) for their permission to reuse some of the prototypes we have cooked together.\n\nThanks to [William Wicks](https://github.com/williamwicks) for letting me\n(even encouraging me to) plunder his [extensions](https://github.com/williamwicks/extensions) library.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexfernandez/prototypes/issues"
  },
  "_id": "prototypes@0.2.2",
  "_shasum": "e1176450d918e8f3ca95cbbd13e060d554911b83",
  "_from": "prototypes@*",
  "_resolved": "https://registry.npmjs.org/prototypes/-/prototypes-0.2.2.tgz"
}
