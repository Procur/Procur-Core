{
  "name": "loadtest",
  "version": "0.2.11",
  "description": "Run load tests for your web application. Mostly ab-compatible interface, with an option to force requests per second. Includes an API for automated load testing.",
  "homepage": "https://github.com/alexfernandez/loadtest",
  "contributors": [
    {
      "name": "Alex Fernández",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexfernandez/loadtest"
  },
  "dependencies": {
    "prototypes": "*",
    "testing": "*",
    "agentkeepalive": "*",
    "log": "*",
    "optimist": "~0.6.0"
  },
  "keywords": [
    "testing",
    "test",
    "load test",
    "load testing",
    "http",
    "performance",
    "black box"
  ],
  "engines": {
    "node": "*"
  },
  "bin": {
    "loadtest": "bin/loadtest.js",
    "testserver-loadtest": "bin/testserver.js"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "node test.js"
  },
  "private": false,
  "readme": "[![Build Status](https://secure.travis-ci.org/alexfernandez/loadtest.png)](http://travis-ci.org/alexfernandez/loadtest)\n\n# loadtest\n\nRuns a load test on the selected HTTP URL. The API allows for easy integration in your own tests.\n\nWhy use loadtest instead of any other of the available tools, notably Apache ab?\nFor simple usage loadtest has a set of basic options designed to be compatible with Apache ab.\nIt also allows you to configure and tweak requests to simulate real world loads.\nInstead of setting a concurrency level and letting the server adjust to it,\nwith the --rps option you can send exactly 2000 requests per second and see how your server copes.\n\nUsing the provided API it is very easy to integrate loadtest with your package, and run programmatic load tests.\nloadtest makes it very easy to run load tests as part of systems tests, before deploying a new version of your software.\nThe results include mean response times and percentiles, so that you can abort deployment e.g. if 99% of the requests don't finish in 10 ms or less.\n\n## Installation\n\nInstall globally as root:\n\n    # npm install -g loadtest\n\nOn Ubuntu or Mac OS X systems install using sudo:\n\n    $ sudo npm install -g loadtest\n\nFor programmatic access, install locally or add package loadtest to your package.json dependencies.\n\n## Basic Usage\n\nRun as a script to load test a URL:\n\n    $ loadtest [-n requests] [-c concurrency] [URL]\n\nThe URL can be \"http://\" or \"https://\". Set the max number of requests with -n, and the desired level of concurrency with the -c parameter.\n\nSingle-dash parameters (e.g. -n) are designed to be compatible with Apache ab.\n  http://httpd.apache.org/docs/2.2/programs/ab.html\n\nTo get online help, run loadtest without parameters:\n\n    $ loadtest\n\n### Regular Usage\n\nThe following parameters are compatible with Apache ab.\n\n#### -n requests\n\nNumber of requests to send out.\n\n#### -c concurrency\n\nloadtest will create a simultaneous number of clients; this parameter controls how many.\n\n#### -t timelimit\n\nNumber of seconds to wait until requests no longer go out. (Note: this is different than Apache's ab, which stops _receiving_ requests after the given seconds.)\n\n### -C cookie-name=value\n\nSend a cookie with the request. A pair name=value is expected and sent to the server.\nThis parameter can be repeated as many times as needed.\n\n### -H header:value\n\nSend a custom header with the request. A pair header:value is expected and sent to the server.\nThis parameter can be repeated as many times as needed.\n\n### -T content-type\n\nSet the MIME content type for POST data. Default: text/plain.\n\n### -p POST-file\n\nSend the data contained in the given file in the POST body.\nRemember to set -T to the correct content-type.\n\n### -u PUT-file\n\nSend the data contained in the given file as a PUT request.\nRemember to set -T to the correct content-type.\n\n#### -r\n\nRecover from errors. Always active: loadtest does not stop on errors.\nAfter the tests are finished, if there were errors a report with all error codes will be shown.\n\n#### -V\n\nShow version number and exit.\n\n### Advanced Usage\n\nThe following parameters are _not_ compatible with Apache ab.\n\n#### --rps requestsPerSecond\n\nControls the number of requests per second for each client.\nCan be fractional, e.g. --rps 0.5 sends one request every two seconds per client.\n\n#### --agent\n\nOpen connections using keep-alive: send header 'Connection: Keep-alive' instead of 'Connection: Close'.\n\n(Warning: uses the default node.js agent, which means there is a limit of 10 outgoing connections.)\n\n#### --keepalive\n\nUse agentkeepalive, which includes 'Connection: Keep-alive'\nand is better performing than the default node.js agent.\n  https://npmjs.org/package/agentkeepalive\n\n#### --quiet\n\nDo not show any messages.\n\n#### --debug\n\nShow debug messages.\n\n### Server\n\nloadtest bundles a test server. To run it:\n\n    $ testserver [--delay ms] [port]\n\nIt will show the number of requests received per second, the latency in answering requests and the headers for selected requests.\n\nThis server returns a short text 'OK' for every request, removing request processing from latency measurements.\n\nThe optional delay instructs the server to wait for the given number of milliseconds before answering each request, to simulate a busy server.\n\n## API\n\nloadtest is not limited to running from the command line; it can be controlled using an API, thus allowing you to load test your application in your own tests.\n\n### Invoke Load Test\n\nTo run a load test use the exported function loadTest() passing it a set of options and an optional callback:\n\n    var loadtest = require('loadtest');\n    var options = {\n        url: 'http://localhost:8000',\n        maxRequests: 1000,\n    };\n    loadtest.loadTest(options, function(error, result)\n    {\n        if (error)\n        {\n            return console.error('Got an error: %s', error);\n        }\n        console.log('Tests run successfully');\n    });\n\nThe callback(error, result) will be invoked when the max number of requests is reached, or when the number of seconds has elapsed.\n\n### Options\n\nThis is the set of available options. Except where noted, all options are (as their name implies) optional.\n\n#### url\n\nThe URL to invoke.\n\n#### concurrency\n\nHow many clients to start in parallel.\n\n#### maxRequests\n\nA max number of requests; after they are reached the test will end.\n\n#### maxSeconds\n\nMaxs number of seconds to run the tests.\n\n#### cookies\n\nAn array of cookies to send. Each cookie should be a string of the form name=value.\n\n#### headers\n\nA map of headers. Each header should be an entry in the map with the given value as a string.\nIf the value is an array, several headers with the same key will be sent.\n\n#### method\n\nThe method to use: POST, PUT. Default: GET.\n\n#### body\n\nThe contents to send in the body of the message, for POST or PUT requests.\nCan be a string or an object (which will be converted to JSON).\n\n#### contentType\n\nThe MIME type to use for the body. Default content type is text/plain.\n\n#### requestsPerSecond\n\nHow many requests each client will send per second.\n\n#### agent\n\nUse the default http agent.\n(Warning: will limit the number of outgoing connections to 10.)\n\n#### quiet\n\nDo not show any messages.\n\n### Results\n\nThe results passed to your callback at the end of the load test contains a full set of data, including: mean latency, number of errors and percentiles.\nAn example follows:\n\n    {\n      totalRequests: 1000,\n      percentiles: {\n        '50': 7,\n        '90': 10,\n        '95': 11,\n        '99': 15\n      },\n      rps: 2824,\n      totalTimeSeconds: 0.354108,\n      meanLatencyMs: 7.72,\n      totalErrors: 3,\n      errors: {\n        '0': 1,\n        '500': 2\n      }\n    }\n\n### Start Test Server\n\nTo start the test server use the exported function startServer() with a set of options and an optional callback:\n\n    var testserver = require('testserver');\n    var server = testserver.startServer({ port: 8000 });\n\nThis function returns an HTTP server which can be close()d when it is no longer useful.\n\nThe following options are available.\n\n#### port\n\nThe port to use for the server. Note: the default port 80 requires special privileges.\n\n#### delay\n\nWait the given number of milliseconds to answer each request.\n\n### Complete Sample\n\nThe file lib/sample.js shows a complete sample, which is also an integration test: it starts the server, send 1000 requests, waits for the callback and closes down the server.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Alex Fernández <alexfernandeznpm@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexfernandez/loadtest/issues"
  },
  "_id": "loadtest@0.2.11",
  "_shasum": "19c0fd3d65151671ea8f0466571eb274791b7ac0",
  "_from": "loadtest@",
  "_resolved": "https://registry.npmjs.org/loadtest/-/loadtest-0.2.11.tgz"
}
